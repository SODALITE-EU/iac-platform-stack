tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - modules/openstack/openstack_vm.yaml
  - modules/docker/docker_host.yaml
  - modules/docker/docker_network.yaml
  - modules/docker/docker_registry.yaml
  - modules/docker/docker_component.yaml
  - modules/docker/docker_certificate.yaml
  - modules/docker/docker_volume.yaml
  - modules/misc/ssh/types.yaml
  - modules/misc/tls/types.yaml
  - modules/tests/test_definitions.yaml
  - library/config/types.yaml
  - library/api/types.yaml
  - library/prometheus/prometheus_config.yaml
  - library/alertmanager/alertmanager_config.yaml
  - library/grafana/grafana_config.yaml

node_types:
  sodalite.nodes.SodaliteVM:
    derived_from: tosca.nodes.Compute
    properties:
      username:
        type: string
      name:
        type: string
        description: Name of machine. Used to write into registry certificate

topology_template:
  inputs:
    username:
      type: string
    local_ipv4_address:
      type: string
    docker-network:
      type: string
    dockerhub-user:
      type: string
      default: ""
    dockerhub-pass:
      type: string
      default: ""
    docker-public-registry-url:
      type: string
      default: ""
    docker-private-registry-url:
      type: string
      default: ""
    docker-registry-cert-country-name:
      type: string
      default: ""
    docker-registry-cert-organization-name:
      type: string
      default: ""
    docker-registry-cert-email-address:
      type: string
      default: ""
    sodalite_db_username:
      type: string
    sodalite_db_password:
      type: string
    sodalite_git_token:
      type: string
    xopera_auth_api_key:
      type: string
    registry_ip_address:
      type: string
    vault_token:
      type: string
    keycloak_admin_password:
      type: map
    keycloak_client_secret:
      type: string
    gf_admin_pw:
      type: string
    gf_admin_user:
      type: string
    gf_port:
      type: string
    gf_registry_port:
      type: string
    oidc_introspection_endpoint:
      type: string
    vault_address:
      type: string
    vault_secret_uploader_port:
      type: string
    ruleserver_port:
      type: string
    project_domains:
      type: list
    kb_password:
      type: string
    nifi_ca_token:
      type: string
    nifi_sensitive_props_key:
      type: string
    nifi_oidc_admin:
      type: string
    nifi_gridftp_certificates_location:
      type: string

  node_templates:
    sodalite-vm:
      type: sodalite.nodes.SodaliteVM
      properties:
        username: { get_input: username }
        name: localhost
      attributes:
        private_address: localhost
        public_address: localhost

    docker-host:
      type: sodalite.nodes.DockerHost
      requirements:
        - host: sodalite-vm

    docker-network:
      type: sodalite.nodes.DockerNetwork
      properties:
        name: { get_input: docker-network }
      requirements:
        - host: sodalite-vm
        - dependency: docker-host

    docker-public-registry:
      type: sodalite.nodes.DockerRegistry
      properties:
        docker_registry_url: { get_input: docker-public-registry-url }
      requirements:
        - host: sodalite-vm
        - dependency: docker-host

    # docker image registry
    docker-private-registry-server-certs:
      type: sodalite.nodes.RegistryServerCertificate
      properties:
        country_name: { get_input: docker-registry-cert-country-name }
        organization_name: { get_input: docker-registry-cert-organization-name }
        email_address: { get_input: docker-registry-cert-email-address }
        cert_ipv4_address: { get_input: local_ipv4_address }
        cert_path: "/home/registry/certs"
        cert_files_prefix: registry
        domain_name: "SODALITE platform stack Registry"
      requirements:
        - host: sodalite-vm
        - dependency: docker-host

    docker-private-registry-client-certificate:
      type: sodalite.nodes.RegistryCertificate
      properties:
        registry_ip: { get_input: local_ipv4_address }
        country_name: { get_input: docker-registry-cert-country-name }
        organization_name: { get_input: docker-registry-cert-organization-name }
        email_address: { get_input: docker-registry-cert-email-address }
      requirements:
        - host: sodalite-vm
        - dependency: docker-host

    docker-private-registry:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: registry
        image_name: library/registry:2
        ports:
          - "443:443"
        #TODO get filenames from docker-registry-certificate, when opera enables functions on all depths
        ca_cert: "/certs/ca.crt"
        client_cert: "/certs/registry.crt"
        client_key: "/certs/registry.key"
        etc_hosts:
          registry.docker.local: 127.0.0.1
        volumes:
          - "/home/localregistry/registry:/var/lib/registry"
          - "/home/registry/certs:/certs"
        env:
          REGISTRY_HTTP_ADDR: 0.0.0.0:443
          REGISTRY_HTTP_TLS_CLIENTCAS: "[/certs/ca.crt]"
          REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/registry.crt"
          REGISTRY_HTTP_TLS_KEY: "/certs/registry.key"
        docker_network_name: { get_property: [SELF, network, name] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: docker-private-registry-server-certs

    traefik-tls-certs:
      type: sodalite.nodes.TLS.Certificate
      properties:
        country_name: { get_input: docker-registry-cert-country-name }
        organization_name: { get_input: docker-registry-cert-organization-name }
        email_address: { get_input: docker-registry-cert-email-address }
        cert_path: "/home/nginx/certs"
      requirements:
        - host: sodalite-vm
        - dependency: docker-host

    proxy-tls-config:
      type: sodalite.nodes.Configuration.NginxConfig
      properties:
        cert_files_prefix:
          { get_attribute: [SELF, dependency, cert_files_prefix] }
        dir: /home/nginx
        filename: certificates.toml
        template_name: "certificates.toml.j2"
      requirements:
        - host: sodalite-vm
        - dependency: traefik-tls-certs

    proxy:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: proxy
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: library/traefik:v2.3.4
        command:
          - "--accesslog=true"
          - "--log.level=info"
          - "--providers.docker=true"
          - "--providers.docker.exposedbydefault=false"
          # entrypoints
          - "--entrypoints.xopera-insecure.address=:5000"
          - "--entrypoints.xopera.address=:5001"
          - "--entrypoints.image-builder.address=:5002"
          - "--entrypoints.postgres.address=:5432"
          - "--entrypoints.traefik.address=:8888"
          # https certs config
          - "--providers.file.directory=/configuration/"
          - "--providers.file.watch=true"
          # dashboard
          - "--api.dashboard=true"
        restart_policy: always
        ports: ["5000:5000", "5001:5001", "5002:5002", "8888:8888", "5432:5432"]
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
          - /home/nginx/certificates.toml:/configuration/certificates.toml:ro
          - /home/nginx/certs:/etc/nginx/certs
        labels:
          traefik.enable: "true"
          traefik.http.routers.traefik.rule: "(PathPrefix(`/traefik`) || PathPrefix(`/api`))"
          traefik.http.routers.traefik.service: "api@internal"
          traefik.http.routers.traefik.entrypoints: "traefik"
          traefik.http.routers.traefik.tls: "true"
          traefik.http.middlewares.strip.stripprefix.prefixes: "/traefik"
          traefik.http.routers.traefik.middlewares: "auth, strip"
          traefik.http.middlewares.auth.digestauth.removeheader: "true"
          traefik.http.middlewares.auth.digestauth.users: "test:traefik:5200b80022bb7d8e8c8bf2eb34b985cb"

      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: traefik-tls-certs
        - dependency: proxy-tls-config

    # authentication

    keycloak-config:
      type: sodalite.nodes.Configuration.KeycloakConfig
      properties:
        dir: /home/keycloak
        filename: sodalite-realm.json
        template_name: sodalite-realm.json.j2
        client_secret: { get_input: keycloak_client_secret }
      requirements:
        - host: sodalite-vm

    keycloak-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: keycloak
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: jboss/keycloak
        restart_policy: always
        ports: ["8100:8080", "8443:8443"]
        env:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: { get_input: keycloak_admin_password }
          KEYCLOAK_IMPORT: /tmp/sodalite-realm.json
        volumes:
          - "/home/keycloak/sodalite-realm.json:/tmp/sodalite-realm.json"
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry
        - dependency: keycloak-config

    vault-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: vault
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: library/vault
        restart_policy: always
        ports: ["8200:8200", "8201:8201"]
        capabilities: ["IPC_LOCK"]
        env:
          VAULT_LOCAL_CONFIG: '{"backend": {"file": {"path": "/vault/file"}}, "default_lease_ttl": "16h", "max_lease_ttl": "72h"}'
          VAULT_DEV_ROOT_TOKEN_ID: { get_input: vault_token }
          VAULT_TOKEN: { get_input: vault_token }
        command: server -dev
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry

    vault-config:
      type: sodalite.nodes.VaultApiConfiguration
      properties:
        address: { get_attribute: [SELF, server, public_address] }
        port: 8200
        api_token: { get_input: vault_token }
        project_domains: { get_input: project_domains }
      requirements:
        - server: sodalite-vm
        - dependency: vault-container

    vault-secret-uploader:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: sodaliteh2020/vault-secret-uploader:latest
        restart_policy: always
        ports: ["8202:8202"]
        exposed_ports: ["8202"]
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          OIDC_INTROSPECTION_ENDPOINT:
            { get_input: oidc_introspection_endpoint }
          OIDC_INTROSPECTION_SECRET: { get_input: keycloak_client_secret }
          VAULT_ADDRESS: { get_input: vault_address }
          VAULT_ADMIN_TOKEN: { get_input: vault_token }
          VAULT_SECRET_UPLOADER_PORT: { get_input: vault_secret_uploader_port }
        alias: vault-secret-uploader
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry
        - dependency: vault-container
        - dependency: keycloak-container

    # platform-discovery-service
    # https://github.com/SODALITE-EU/platform-discovery-service
    platform-discovery-service:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: pds
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/platform-discovery-service
        restart_policy: always
        ports: ["8089:8081"]
        env:
          SECRET_VAULT_LOGIN_URI: http://vault:8200/v1/auth/jwt/login
          SECRET_VAULT_URI: http://vault:8200/v1/
          OIDC_INTROSPECTION_ENDPOINT:
            { get_input: oidc_introspection_endpoint }
          OIDC_CLIENT_SECRET: { get_input: keycloak_client_secret }
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry

    # xopera-rest-api
    # https://github.com/SODALITE-EU/xopera-rest-api
    xopera-openstack-keys:
      type: sodalite.nodes.ConfigureKeys
      requirements:
        - host: sodalite-vm

    xopera-openapi-volume:
      type: sodalite.nodes.DockerVolume
      properties:
        name: xopera-openapi
      requirements:
        - host: sodalite-vm

    xopera-postgres:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: library/postgres:13
        volumes:
          - "/home/postgres:/var/lib/postgresql/data"
        alias: xopera-postgres
        env:
          POSTGRES_USER: { get_input: sodalite_db_username }
          POSTGRES_PASSWORD: { get_input: sodalite_db_password }
          POSTGRES_DB: postgres
        docker_network_name: { get_property: [SELF, network, name] }
        labels:
          traefik.enable: "true"
          traefik.tcp.services.xopera-postgres.loadbalancer.server.port: "5432"
          traefik.tcp.routers.xopera-postgres.rule: "HostSNI(`*`)"
          traefik.tcp.routers.xopera-postgres.entrypoints: "postgres"

      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry

    xopera-rest-api:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: xopera-rest-api
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/xopera-rest-api:2.4.0
        restart_policy: always
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /root/.ssh/:/root/.ssh/
          - xopera-openapi:/app/opera/api/openapi/openapi/
        labels:
          traefik.enable: "true"
          traefik.http.services.xopera-rest-api.loadbalancer.server.port: "8080"
          # http config
          traefik.http.routers.xopera-rest-api-insecure.rule: "PathPrefix(`/`)"
          traefik.http.routers.xopera-rest-api-insecure.entrypoints: "xopera-insecure"
          # https config
          traefik.http.routers.xopera-rest-api.rule: "PathPrefix(`/`)"
          traefik.http.routers.xopera-rest-api.entrypoints: "xopera"
          traefik.http.routers.xopera-rest-api.tls: "true"
        env:
          DEBUG: "false"
          LOG_LEVEL: debug
          PYTHONUNBUFFERED: "1"
          INVOCATION_SERVICE_WORKERS: "10"
          # XOPERA GIT SETTINGS
          XOPERA_GIT_TYPE: gitlab
          XOPERA_GIT_URL: https://gitlab.com
          XOPERA_GIT_AUTH_TOKEN: { get_input: sodalite_git_token }
          # XOPERA POSTGRES CONNECTION
          XOPERA_DATABASE_IP: xopera-postgres
          XOPERA_DATABASE_NAME: postgres
          XOPERA_DATABASE_USER: { get_input: sodalite_db_username }
          XOPERA_DATABASE_PASSWORD: { get_input: sodalite_db_password }
          # OIDC SETTINGS
          OIDC_INTROSPECTION_ENDPOINT:
            { get_input: oidc_introspection_endpoint }
          OIDC_CLIENT_SECRET: { get_input: keycloak_client_secret }
          AUTH_API_KEY: { get_input: xopera_auth_api_key }
          VAULT_LOGIN_URI: http://vault:8200/v1/auth/jwt/login
          VAULT_SECRET_URI: http://vault:8200/v1/
          # ANSIBLE CONFIGURATION
          ANSIBLE_TIMEOUT: "60"
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: xopera-openstack-keys
        - dependency: xopera-postgres
        - dependency: xopera-openapi-volume

    xopera-ui:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: xopera-ui
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: swaggerapi/swagger-ui:v3.37.0
        restart_policy: always
        volumes:
          - xopera-openapi:/openapi:ro
        env:
          SWAGGER_JSON: /openapi/openapi.yaml
        labels:
          traefik.enable: "true"
          traefik.http.services.xopera-ui.loadbalancer.server.port: "8080"
          traefik.http.middlewares.stripprefix-ui.stripprefix.prefixes: "/ui"
          # http config
          traefik.http.routers.xopera-ui-insecure.entrypoints: "xopera-insecure"
          traefik.http.routers.xopera-ui-insecure.rule: "PathPrefix(`/ui`)"
          traefik.http.routers.xopera-ui-insecure.middlewares: "stripprefix-ui"
          # https config
          traefik.http.routers.xopera-ui.entrypoints: "xopera"
          traefik.http.routers.xopera-ui.tls: "true"
          traefik.http.routers.xopera-ui.rule: "PathPrefix(`/ui`)"
          traefik.http.routers.xopera-ui.middlewares: "stripprefix-ui"
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: xopera-rest-api
        - dependency: xopera-openapi-volume

    # iac-blueprint-builder
    # https://github.com/SODALITE-EU/iac-blueprint-builder
    iac-builder-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: iac-builder
        image_name: sodaliteh2020/iac-blueprint-builder:M24Release
        docker_network_name: { get_property: [SELF, network, name] }
        restart_policy: always
        ports:
          - "8081:80"
        env:
          XOPERA_ENDPOINT: http://proxy:5000
          MODAK_ENDPOINT: http://modak-api:55000
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: proxy

    # image-builder
    # https://github.com/SODALITE-EU/image-builder
    image-builder-api:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: sodaliteh2020/image-builder-api:1.0.0
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          REGISTRY_IP: { get_input: registry_ip_address }
          DEBUG: "false"
          LOG_LEVEL: debug
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
        alias: image-builder-api
        labels:
          traefik.enable: "true"
          traefik.http.services.image-builder.loadbalancer.server.port: "8080"

          # https config
          traefik.http.routers.image-builder.rule: "PathPrefix(`/`)"
          traefik.http.routers.image-builder.entrypoints: "image-builder"
          traefik.http.routers.image-builder.tls: "true"
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network

    # semantic-reasoner
    # https://github.com/SODALITE-EU/semantic-reasoner
    know-db-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: graph-db
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/graph_db:192
        restart_policy: always
        ports: ["7200:7200"]
        exposed_ports: ["7200"]
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network

    semantic-web-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: semantic-web
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/semantic_web:M24Release
        restart_policy: always
        env:
          WAIT_HOSTS: graph-db:7200
          environment: docker
          graphdb: http://graph-db:7200
          bugPredictorServer: http://tosca-smells:8080/
          ansiblePath: /usr/local/tomcat/webapps/Ansibles/
          reasonerServer: http://semantic-web:8080/
          kbUsername: admin
          kbPassword: { get_input: kb_password }
          keycloak: http://keycloak:8080/
          keycloakClientId: sodalite-ide
          keycloakClientSecret: { get_input: keycloak_client_secret }
        ports: ["8080:8080"]
        volumes:
          - "/tmp/tomcat/webapps/Ansibles:/usr/local/tomcat/webapps/Ansibles"
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: know-db-container
        - dependency: tosca-smells-container

    know-db-config:
      type: sodalite.nodes.KBApiConfiguration
      properties:
        address: { get_attribute: [SELF, server, public_address] }
        port: 7200
        reasoner_address: { get_attribute: [SELF, server, public_address] }
        reasoner_port: 8080
        kb_password: { get_input: kb_password }
      requirements:
        - server: sodalite-vm
        - dependency: know-db-container
        - dependency: semantic-web-container

    # iac-quality-framework
    # https://github.com/SODALITE-EU/iac-quality-framework
    iac-metrics-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: iac-metrics
        image_name: sodaliteh2020/iacmetrics:8
        restart_policy: always
        ports: ["5003:5000"]
      requirements:
        - host: docker-host
        - registry: docker-public-registry

    # defect-prediction
    # https://github.com/SODALITE-EU/defect-prediction
    tosca-smells-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: tosca-smells
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/toscasmells:349
        restart_policy: always
        env:
          environment: docker
          WAIT_HOSTS: graph-db:7200
          graphdb: http://graph-db:7200
          kbUsername: admin
          kbPassword: { get_input: kb_password }
        ports: ["8082:8080"]
        exposed_ports: ["8080"]
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - dependency: know-db-container
        - network: docker-network

    ansible-smells-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: ansible-smells
        image_name: sodaliteh2020/ansiblesmells:349
        restart_policy: always
        ports: ["5004:5000"]
      requirements:
        - host: docker-host
        - registry: docker-public-registry

    # verification
    # https://github.com/SODALITE-EU/verification
    tosca-syntax-verifier-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: tosca-syntax
        image_name: sodaliteh2020/toscasynverifier:8
        restart_policy: always
        ports: ["5005:5000"]
      requirements:
        - host: docker-host
        - registry: docker-public-registry

    workflow-verifier-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: workflow-verifier
        image_name: sodaliteh2020/workflowverifier:8
        restart_policy: always
        ports: ["5006:5000"]
      requirements:
        - host: docker-host
        - registry: docker-public-registry

    # refactoring-ml
    # https://github.com/SODALITE-EU/refactoring-ml
    rule-based-refactorer-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: rule-based-refactorer
        image_name: sodaliteh2020/rule_based_refactorer:49
        restart_policy: always
        ports: ["8083:8080"]
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          prometheus: http://prometheus:9090
          xopera: http://proxy:5000
          refacopdiscoverer: http://refactoring-option-discoverer:8080
          perfpredictor: http://performance-predictor-refactoring:5000
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: proxy
        - dependency: performance-predictor-refactoring-container
        - dependency: refactoring-option-discoverer-container

    performance-predictor-refactoring-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: performance-predictor-refactoring
        image_name: sodaliteh2020/fo_perf_predictor_api:49
        restart_policy: always
        ports: ["5007:5000"]
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          prometheus: http://prometheus:9090
          xopera: http://proxy:5000
          refacopdiscoverer: http://refactoring-option-discoverer:8080
          perfpredictor: http://performance-predictor-refactoring:5000
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: proxy
        - dependency: refactoring-option-discoverer-container

    # https://github.com/SODALITE-EU/refactoring-option-discoverer
    refactoring-option-discoverer-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: refactoring-option-discoverer
        image_name: sodaliteh2020/refactoring_option_discoverer:60
        restart_policy: always
        ports: ["8084:8080"]
        env:
          graphdb: http://graph-db:7200
        docker_network_name: { get_property: [SELF, network, name] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: know-db-container

    # skydive-analyzer
    # https://github.com/skydive-project/skydive
    skydive-analyzer:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: skydive/skydive:0.27.0
        command: analyzer
        docker_network_name: { get_property: [SELF, network, name] }
        ports: ["8088:8082", "8088:8082/udp"]
        alias: skydive-analyzer
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network

    # skydive-capture
    # https://github.com/skydive-project/skydive
    skydive-capture:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: skydive/skydive:0.27.0
        command: client capture create --extra-tcp-metric --gremlin "G.V()"
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          SKYDIVE_ANALYZER: skydive-analyzer:8082
        alias: skydive-capture
        restart_policy: no
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: skydive-analyzer

    # prometheus-skydive-connector
    # https://github.com/SODALITE-EU/skydive-flow-exporter/prom_sky_con
    prometheus-skydive-connector:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: sodaliteh2020/prometheus-skydive-connector:1
        command: /etc/prom_sky_con.yml
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          SKYDIVE_PIPELINE_SUBSCRIBER_URL: ws://skydive-analyzer:8082/ws/subscriber/flow
        ports: ["9101:9100"]
        alias: prometheus-skydive-connector
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network

    # MONITORING-SYSTEM
    # https://github.com/SODALITE-EU/monitoring-system

    monitoring-system-consul:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: consul
        image_name: library/consul:1.9.1
        restart_policy: always
        ports: ["8500:8500", "8600:8600/udp"]
        exposed_ports: ["8500", "8600/udp"]
        docker_network_name: { get_property: [SELF, network, name] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network

    alertmanager-config:
      type: sodalite.nodes.monitoring-system-alertmanager.config
      properties:
        dest: /etc/alertmananger/alertmanager.yml
      requirements:
        - dependency: monitoring-system-consul
        - host: sodalite-vm

    monitoring-system-alertmanager:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: alertmanager
        image_name: prom/alertmanager:v0.21.0
        restart_policy: always
        ports: ["9093:9093"]
        exposed_ports: ["9093"]
        docker_network_name: { get_property: [SELF, network, name] }
        volumes:
          - "/etc/alertmananger:/etc/alertmanager"
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: alertmanager-config

    prometheus-config:
      type: sodalite.nodes.monitoring-system-prometheus.config
      properties:
        dest: /etc/prometheus/prometheus.yml
        alertmanager_endpoint: alertmanager:9093
        consul_endpoint: consul:8500
      requirements:
        - dependency: monitoring-system-alertmanager
        - dependency: monitoring-system-consul
        - host: sodalite-vm

    monitoring-system-prometheus:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: prometheus
        image_name: prom/prometheus:v2.23.0
        restart_policy: always
        ports: ["9090:9090"]
        exposed_ports: ["9090"]
        docker_network_name: { get_property: [SELF, network, name] }
        volumes:
          - "/etc/prometheus:/etc/prometheus"
          - rules-volume:/etc/prometheus/rules
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: prometheus-config

    grafana-config:
      type: sodalite.nodes.monitoring-system-grafana.config
      properties:
        dest_conf: /etc/grafana/grafana.ini
        dest_conf_datasources: /etc/grafana/conf-datasources/datasources.yaml
        prometheus_endpoint: prometheus:9090
        keycloak_endpoint: 77.231.202.214:8080
        keycloak_realm: SODALITE
        keycloak_secret: { get_input: keycloak_client_secret }
        gf_admin_pw: { get_input: gf_admin_pw }
      requirements:
        - dependency: monitoring-system-prometheus
        - host: sodalite-vm

    monitoring-system-grafana:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: grafana
        image_name: grafana/grafana:7.3.7
        restart_policy: always
        ports: ["3000:3000"]
        exposed_ports: ["3000"]
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          GF_SECURITY_ADMIN_USER: { get_input: gf_admin_user }
          GF_SECURITY_ADMIN_PASSWORD: { get_input: gf_admin_pw }
        volumes:
          - "/etc/grafana/conf-datasources:/etc/grafana/provisioning/datasources"
          - "/etc/grafana:/etc/grafana"
          - "grafana:/var/lib/grafana"
      requirements:
        - dependency: monitoring-system-prometheus
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: grafana-config
        - dependency: keycloak-container

    grafana-registry:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: grafana-registry
        image_name: sodaliteh2020/grafana-registry
        restart_policy: always
        ports: ["3001:3001"]
        exposed_ports: ["3001"]
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          GF_ADMIN_USER: { get_input: gf_admin_user }
          GF_ADMIN_PW: { get_input: gf_admin_pw }
          GF_PORT: { get_input: gf_port }
          GF_REGISTRY_GUNICORN_WORKERS: "4"
          OIDC_INTROSPECTION_ENDPOINT:
            { get_input: oidc_introspection_endpoint }
          OIDC_CLIENT_SECRET: { get_input: keycloak_client_secret }
          FLASK_RUN_PORT: { get_input: gf_registry_port }
        volumes:
          - "/var/lib/grafana-registry:/app/data"
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: monitoring-system-grafana
        - dependency: keycloak-container

    # Register prometheus-skydive-connector with prometheus consul
    prometheus-skydive-connector-registration:
      type: sodalite.nodes.Tests.Text.Command
      properties:
        # localhost should really be replaced with something like {{ monitoring-system-consul }}; should use concat
        command: ' curl -X PUT -d '' { "Name": "consul-registered-skydive-exporters", "ID": "fakeuniqueid-skydive-exporter", "Address": "prometheus-skydive-connector", "Port": 9100 } '' localhost:8500/v1/agent/service/register '
        comparable_string: ".*"
        regex: true
      requirements:
        - dependency: prometheus-skydive-connector
        - dependency: monitoring-system-consul
        - dependency: monitoring-system-prometheus

    hpc-exporter:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: hpc-exporter
        image_name: sodaliteh2020/hpc-exporter-mt
        restart_policy: always
        ports: ["9110:9110"]
        exposed_ports: ["9110"]
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          OIDC_INTROSPECTION_ENDPOINT:
            { get_input: oidc_introspection_endpoint }
          OIDC_INTROSPECTION_SECRET: { get_input: keycloak_client_secret }
          VAULT_ADDRESS: { get_input: vault_address }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: vault-container
        - dependency: keycloak-container

    monitoring-system-ruleserver:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: sodaliteh2020/monitoring-system-ruleserver:latest
        restart_policy: always
        ports: ["9092:9092"]
        exposed_ports: ["9092"]
        docker_network_name: { get_property: [SELF, network, name] }
        env:
          GUNICORN_WORKERS: "8"
          RULESERVER_PORT: { get_input: ruleserver_port }
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - rules-volume:/etc/prometheus/rules
        alias: ruleserver
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry
        - dependency: monitoring-system-prometheus

    # MODAK
    # https://github.com/SODALITE-EU/application-optimisation/tree/api_split
    modak-api-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: modak-api
        image_name: sodaliteh2020/modak-api:0.1.2-dev
        restart_policy: always
        ports: ["55000:5000"]
        exposed_ports: ["55000"]
        env:
          MODAK_DATABASE_PASSWORD: { get_input: sodalite_db_password }
          MODAK_DATABASE_HOST: modak-db
          MODAK_DATABASE_PORT: "3306"
        docker_network_name: { get_property: [SELF, network, name] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: modak-db-container

    modak-db-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: modak-db
        image_name: sodaliteh2020/modak-py3-mysql:0.1.2-dev
        restart_policy: always
        ports: ["32000:3306"]
        exposed_ports: ["32000"]
        volumes:
          - /docker-entrypoint-initdb.d/
        env:
          MYSQL_ROOT_HOST: "%"
          MYSQL_ROOT_PASSWORD: { get_input: sodalite_db_password }
        docker_network_name: { get_property: [SELF, network, name] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network

    # NODE MANAGER
    # https://github.com/SODALITE-EU/refactoring-ct
    node-manager-containers_manager:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: node-manager-containers_manager
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/node-manager-containers_manager
        restart_policy: always
        ports: ["8090:5001"]
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry

    node-manager-requests_store:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: node-manager-requests_store
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/node-manager-requests_store
        restart_policy: always
        ports: ["8091:5002"]
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry
    node-manager-controller:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: node-manager-controller
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/node-manager-controller
        restart_policy: always
        ports: ["8092:5003"]
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry
    node-manager-dispatcher:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: node-manager-dispatcher
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/node-manager-dispatcher
        restart_policy: always
        ports: ["8093:8000"]
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry
    node-manager-orchestrator:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: node-manager-orchestrator
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/nodemanager_orchestrator
        restart_policy: always
        ports: ["8094:5000"]
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry
    node-manager-dashboard:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: node-manager-dashboard
        docker_network_name: { get_property: [SELF, network, name] }
        image_name: sodaliteh2020/nodemanager_dashboard
        restart_policy: always
        ports: ["8095:8080"]
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry

    node-manager-config:
      type: sodalite.nodes.nodemanager.config
      properties:
        endpoint:
          {
            concat:
              [
                "http://",
                { get_attribute: [SELF, server, public_address] },
                ":8094/configuration",
              ],
          }
        orchestrator:
          actuator_image: "sodaliteh2020/nodemanager_actuator:latest"
          actuator_port: 5000
          containers_manager:
            {
              concat:
                [
                  "http://",
                  { get_attribute: [SELF, server, public_address] },
                  ":8090",
                ],
            }
          requests_store:
            {
              concat:
                [
                  "http://",
                  { get_attribute: [SELF, server, public_address] },
                  ":8091",
                ],
            }
          dispatcher:
            {
              concat:
                [
                  "http://",
                  { get_attribute: [SELF, server, public_address] },
                  ":8093",
                ],
            }
          controller:
            {
              concat:
                [
                  "http://",
                  { get_attribute: [SELF, server, public_address] },
                  ":8092",
                ],
            }
          tfs_init_image: "sodaliteh2020/nodemanager_tfs_init"
          tfs_config_endpoint:
            {
              concat:
                [
                  "http://",
                  { get_attribute: [SELF, server, public_address] },
                  ":8094/configuration/tfs",
                ],
            }
          tfs_models_url:
            {
              concat:
                [
                  "http://",
                  { get_attribute: [SELF, server, public_address] },
                  ":8094/configuration/tfs",
                ],
            }
          k8s_service_type: "NodePort"
          k8s_image_pull_policy: "Never"
          k8s_host_network: true
        containers_manager:
          init_quota: 2
        controller:
          min_cores: 0.1
          max_cores: 2
          control_period: 5
          control_type: "CT"
          dry_run: true
        dispatcher:
          gpu_queues_policy: 2
          max_log_consumers: 1
          max_polling_threads: 1
          max_consumers_cpu: 100
          max_consumers_gpu: 100
          verbose: 1
      requirements:
        - dependency: node-manager-containers_manager
        - dependency: node-manager-orchestrator
        - dependency: node-manager-requests_store
        - dependency: node-manager-dispatcher
        - dependency: node-manager-controller
        - server: sodalite-vm 


    # Apache NiFi
    nifi-zookeper:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: zookeper
        hostname: zookeeper
        image_name: bitnami/zookeeper:latest
        restart_policy: always
        ports: ["2181:2181"]
        env:
          ALLOW_ANONYMOUS_LOGIN: yes
        docker_network_name: { get_property: [SELF, network, name] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: keycloak-container

    nifi-ca:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: nifi-ca
        hostname: nifi-ca.nifi.cluster
        image_name: apache/nifi-toolkit:1.15.3
        restart_policy: always
        ports: ["9443:9443"]
        entrypoint:
          - sh
          - -c
          - |
            exec $${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh server -c $$HOSTNAME -t $$NIFI_CA_TOKEN -p $$NIFI_CA_PORT
        env:
          NIFI_CA_TOKEN: { get_input: nifi_ca_token }
          NIFI_CA_PORT: 9443
        docker_network_name: { get_property: [SELF, network, name] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: nifi-zookeper

    nifi-nifi1:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: nifi1
        hostname: nifi1.nifi.cluster
        image_name: sodaliteh2020/jglobus-nifi:1.15.3
        restart_policy: always
        ports: ["9543:9443"]
        env:
          NIFI_VERSION: 1.15.3
          NIFI_INSTANCE_COUNT: 2
          AUTH: tls
          NIFI_WEB_HTTPS_HOST: nifi1.nifi.cluster
          NIFI_WEB_HTTPS_PORT: 9443
          NIFI_WEB_PROXY_HOST: nifi1.nifi.cluster:9543,localhost:9543
          NIFI_SENSITIVE_PROPS_KEY: { get_input: nifi_sensitive_props_key }
          INITIAL_ADMIN_IDENTITY: { get_input: nifi_oidc_admin }
          NIFI_CLUSTER_IS_NODE: true
          NIFI_CLUSTER_NODE_PROTOCOL_PORT: 9988
          NIFI_CLUSTER_NODE_PROTOCOL_THREADS: 10
          NIFI_CLUSTER_NODE_PROTOCOL_MAX_THREADS: 50
          NIFI_ZK_CONNECT_STRING: zookeeper:2181
          NIFI_ELECTION_MAX_WAIT: 1 min
          NIFI_OIDC_DISCOVERY_URL: http://keycloak:8080/auth/realms/SODALITE/.well-known/openid-configuration
          NIFI_OIDC_CLIENT_ID: sodalite-ide
          NIFI_OIDC_CLIENT_SECRET: { get_input: keycloak_client_secret }
          NIFI_OIDC_ADMIN: { get_input: nifi_oidc_admin }
          NIFI_CA_TOKEN: { get_input: nifi_ca_token }
          NIFI_CA_HOST: nifi-ca.nifi.cluster
          NIFI_CA_PORT: 9443
        docker_network_name: { get_property: [SELF, network, name] }
        volumes:
          - { concat: [ { get_input: nifi_gridftp_certificates_location }, ":", "/etc/grid-security/certificates" ] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: nifi-zookeper
        - dependency: nifi-ca

    nifi-nifi2:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: nifi2
        hostname: nifi2.nifi.cluster
        image_name: sodaliteh2020/jglobus-nifi:1.15.3
        restart_policy: always
        ports: ["9643:9443"]
        env:
          NIFI_VERSION: 1.15.3
          NIFI_INSTANCE_COUNT: 2
          AUTH: tls
          NIFI_WEB_HTTPS_HOST: nifi2.nifi.cluster
          NIFI_WEB_HTTPS_PORT: 9443
          NIFI_WEB_PROXY_HOST: nifi2.nifi.cluster:9643,localhost:9643
          NIFI_SENSITIVE_PROPS_KEY: { get_input: nifi_sensitive_props_key }
          INITIAL_ADMIN_IDENTITY: { get_input: nifi_oidc_admin }
          NIFI_CLUSTER_IS_NODE: true
          NIFI_CLUSTER_NODE_PROTOCOL_PORT: 9988
          NIFI_CLUSTER_NODE_PROTOCOL_THREADS: 10
          NIFI_CLUSTER_NODE_PROTOCOL_MAX_THREADS: 50
          NIFI_ZK_CONNECT_STRING: zookeeper:2181
          NIFI_ELECTION_MAX_WAIT: 1 min
          NIFI_OIDC_DISCOVERY_URL: http://keycloak:8080/auth/realms/SODALITE/.well-known/openid-configuration
          NIFI_OIDC_CLIENT_ID: sodalite-ide
          NIFI_OIDC_CLIENT_SECRET: { get_input: keycloak_client_secret }
          NIFI_OIDC_ADMIN: { get_input: nifi_oidc_admin }
          NIFI_CA_TOKEN: { get_input: nifi_ca_token }
          NIFI_CA_HOST: nifi-ca.nifi.cluster
          NIFI_CA_PORT: 9443
        docker_network_name: { get_property: [SELF, network, name] }
        volumes:
          - { concat: [ { get_input: nifi_gridftp_certificates_location }, ":", "/etc/grid-security/certificates" ] }
      requirements:
        - host: docker-host
        - registry: docker-public-registry
        - network: docker-network
        - dependency: nifi-zookeper
        - dependency: nifi-ca

    # IDE
    # https://github.com/SODALITE-EU/ide
    # requires X11 system
    # ide-config:
    #   type: sodalite.nodes.Configuration.IDE
    #   properties:
    #     dir: /tmp
    #     filename: sodalite.properties
    #     iac_blueprint_builder_endpoint: iac-builder:80
    #     semantic_web_endpoint: semantic-web:8080
    #     xopera_endpoint: xopera-nginx:5000
    #   requirements:
    #     - host: sodalite-vm

    # ide-container:
    #   type: sodalite.nodes.DockerizedComponent
    #   properties:
    #     image_name: sodaliteh2020/sodalite-ide
    #     docker_network_name:  { get_property: [ SELF, network, name ] }
    #     volumes:
    #       - "/tmp/.X11-unix:/tmp/.X11-unix"
    #       - /tmp/sodalite.properties:/sodalite/eclipse/sodalite.properties
    #     alias: sodalite-ide
    #     env:
    #       DISPLAY=:0
    #   requirements:
    #     - host: docker-host
    #     - registry: docker-public-registry
    #     - network: docker-network
